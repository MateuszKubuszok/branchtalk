version: '2.1'

networks:
  branchtalk-monolith:
    driver: bridge

services:
  postgres:
    image: 'bitnami/postgresql:12-debian-10'
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - 'postgres_data:/bitnami/postgresql'
    environment:
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 4
    networks:
      - branchtalk-monolith

  postgres-setup:
    image: 'bitnami/postgresql:12-debian-10'
    command: >
      sh -c "PGPASSWORD=password psql --host postgres --command=\"CREATE DATABASE discussions\" &&
             PGPASSWORD=password psql --host postgres --command=\"CREATE USER discussions WITH PASSWORD 'password'\" discussions &&
             PGPASSWORD=password psql --host postgres --command=\"CREATE SCHEMA discussions AUTHORIZATION discussions\"" discussions
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - branchtalk-monolith

  zookeeper:
    image: 'bitnami/zookeeper:3-debian-10'
    restart: always
    ports:
      - '2181:2181'
    volumes:
      - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - branchtalk-monolith

  kafka:
    image: 'bitnami/kafka:2-debian-10'
    restart: always
    ports:
      - '9092:9092'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test:
        ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 4
    networks:
      - branchtalk-monolith

  kafka-setup:
    image: 'bitnami/kafka:2-debian-10'
    volumes:
      - 'kafka_data:/bitnami'
    command: >
      sh -c 'cd /opt/bitnami/kafka/bin &&
             kafka-topics.sh --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic users &&
             kafka-topics.sh --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic users-internal &&
             kafka-topics.sh --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic discussions &&
             kafka-topics.sh --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic discussions-internal'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - branchtalk-monolith

volumes:
  postgres_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
